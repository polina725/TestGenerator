using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Tests
{
    [TestClass]
    public class Testing
    {

        private List<Generator.GeneratedFileInfo> generatedTests;
        private SyntaxNode root;

        [TestInitialize]
        public void Init()
        {
            Generator.Generator gen = new Generator.Generator("..\\..\\..\\Output");
            generatedTests = gen.AnalyseFile(File.ReadAllText("..\\..\\..\\Input\\Exemple.cs"));
            root = CSharpSyntaxTree.ParseText(generatedTests[1].SourceCode).GetRoot();
        }

        [TestMethod]
        public void AmountOfGeneratedTests()
        {
            Assert.AreEqual(3,generatedTests.Count);
        }

        [TestMethod]
        public void NamespaceNameCheck()
        {
            IEnumerable<string> namespaces = root.DescendantNodes().OfType<NamespaceDeclarationSyntax>().Select(node => node.Name.ToString());
            Assert.AreEqual("tests", namespaces.First());
        }

        [TestMethod]
        public void UsingsNamesCheck()
        {
            string[] expectedUsingsNames = { "System", "System.Linq", "System.Collections.Generic", "NuGet.Frameworks" };
            string[] usings = root.DescendantNodes().OfType<UsingDirectiveSyntax>().Select(node => node.Name.ToString()).ToArray();
            CheckNames(usings, expectedUsingsNames);
        }

        [TestMethod]
        public void ClassNameCheck()
        {
            string[] classes = root.DescendantNodes().OfType<ClassDeclarationSyntax>().Select(node => node.Identifier.ValueText).ToArray();
            Assert.AreEqual(1, classes.Length);
            Assert.AreEqual("AnotherClassTest", classes[0]);
        }

        [TestMethod]
        public void MethodsNamesCheck()
        {
            string[] methods = root.DescendantNodes().OfType<MethodDeclarationSyntax>().Select(node => node.Identifier.ValueText).ToArray();
            Assert.AreEqual(2,methods.Length);
            string[] expectedMethodsNames = { "FirstMethodATest", "SecondMethodATest" };
            CheckNames(methods, expectedMethodsNames);
        }

        [TestMethod]
        public void MethodBodyCheck()
        {
            SyntaxList<StatementSyntax> bodies = root.DescendantNodes().OfType<MethodDeclarationSyntax>().Select(node => node.Body.Statements).First();
            Assert.AreEqual("Assert.Fail(\"autogenerated\");", bodies.First().ToString());
        }

        private void CheckNames(string[] actualNames, string[] expectedNames)
        {
            foreach (string actualName in actualNames)
                if (!NameCorrect(actualName, expectedNames))
                    Assert.Fail($"Wrong name: {actualName}\n");
        }

        private bool NameCorrect(string name,string[] expectedNames)
        {
            foreach (string _name in expectedNames)
                if (name == _name)
                    return true;
            return false;
        }
    }
}
